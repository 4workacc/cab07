{"version":3,"sources":["components/MainPage/MP_Menu/MP_Menu.js","components/MainPage/MainPage.js","redux/actions/ALogIn.js","components/LoginPage/LoginPage.js","components/App/App.js","serviceWorker.js","redux/initState.js","redux/initRed.js","index.js"],"names":["MP_Menu","props","className","React","Component","MainPage","state","userId","onClick","xx","NavClickHandler","ALogIn","usLoginPass","type","data","newUserId","LoginPage","clickLPSubmit","bind","this","LP_tryToLogin","fetch","then","res","json","result","setState","isLoaded","items","error","id","name","placeholder","ss","value","connect","curUserId","dispatch","usNamePass","ALoginIn","App","curPage","curSubPage","nextProps","curId","Boolean","window","location","hostname","match","initState","curMenuSubPage","initRed","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0d563b19.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./MP_Menu.scss\";\r\n\r\nclass MP_Menu extends React.Component {\r\n    constructor ( props ){\r\n        super ( props ) \r\n    }\r\n    render(){\r\n        return(\r\n            <div className = \"MP_Menu\">\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MP_Menu;","import React from 'react';\r\nimport \"./MainPage.scss\";\r\n\r\nimport MP_Menu from './MP_Menu/MP_Menu';\r\n\r\nclass MainPage extends React.Component {\r\n    constructor ( props ) {\r\n        super ( props );\r\n        this.state = {\r\n            userId : -1          \r\n        }\r\n    }\r\n    showCurMenuSet(){\r\n        // this.state\r\n    }\r\n    render() {\r\n        return (\r\n            <div className = \"MainPage\">\r\n                MainPage \r\n                <div className = \"MP_MainNav\">\r\n                    <ul className = \"MP_MainNav_HeadNav\">\r\n                        <li onClick = { (xx) => this.NavClickHandler( \"MainPage\" ) } >Галоўнае меню</li>\r\n                        <li onClick = { (xx) => this.NavClickHandler( \"Напрацоўкі\" ) }>Напрацоўкі</li>\r\n                        <li onClick = { (xx) => this.NavClickHandler( \"Гульні\" ) }>Гульні</li>\r\n                        <li onClick = { (xx) => this.NavClickHandler( \"Анімацыі\" ) }>Анімацыі</li>\r\n                        <li onClick = { (xx) => this.NavClickHandler( \"Тэсты\" ) }>Тэсты</li>\r\n                        <li onClick = { (xx) => this.NavClickHandler( \"Творчасць\" ) }>Творчасць</li>\r\n                        <li onClick = { (xx) => this.NavClickHandler( \"Стратэгія\" ) }>Стратэгія</li>\r\n                        <li onClick = { (xx) => this.NavClickHandler( \"Мысленне\" ) }>Мысленне</li>                       \r\n                    </ul>\r\n                </div>  \r\n                <MP_Menu />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPage;","let ALogIn = ( usLoginPass ) => {\r\n    return {\r\n        type : \"LOG_IN\",\r\n        data : {\r\n            newUserId  : 11\r\n        }\r\n    }\r\n} \r\n\r\nexport default ALogIn;","import React from 'react';\r\nimport './LoginPage.scss';\r\n\r\nimport { connect } from 'react-redux';\r\nimport ALoginIn from '../../redux/actions/ALogIn';\r\n\r\nclass LoginPage extends React.Component {\r\n    constructor ( props ) {\r\n        super ( props );\r\n        this.clickLPSubmit = this.clickLPSubmit.bind( this );\r\n    }\r\n    clickLPSubmit(){\r\n        // fetch to server\r\n        // if login and pass exist -> tryToLogin\r\n        // else showErr\r\n        this.props.LP_tryToLogin(\"asd\");       \r\n    }  \r\n    LP_fetchToServer() {\r\n        fetch(\"https://api.example.com/items\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: result.items\r\n            });\r\n          },\r\n          // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\r\n          // чтобы не перехватывать исключения из ошибок в самих компонентах.\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error\r\n            });\r\n          }\r\n        )\r\n    }\r\n    render(){\r\n        return (            \r\n            <div className = \"LoginPage\">               \r\n                    <input \r\n                        type=\"text\" \r\n                        id=\"login\" \r\n                        className=\"fadeIn second\" \r\n                        name=\"login\" \r\n                        placeholder={\"\"+this.props.ss}/>\r\n                    <input \r\n                        type=\"text\" \r\n                        id=\"password\" \r\n                        className=\"fadeIn third\" \r\n                        name=\"login\" \r\n                        placeholder=\"password\" />\r\n                    <input \r\n                        type=\"submit\" \r\n                        className=\"fadeIn fourth LPsubmit\" \r\n                        value=\"Log In\"\r\n                        onClick = { this.clickLPSubmit }/>               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapState = ( state ) =>{\r\n    return {\r\n        ss: state.curUserId\r\n    }\r\n}\r\nlet mapDispatch = dispatch => {\r\n    return {\r\n        LP_tryToLogin : (usNamePass) => dispatch ( ALoginIn( usNamePass ))\r\n    }\r\n}\r\nexport default connect(mapState, mapDispatch ) (LoginPage);\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport MainPage from '../MainPage/MainPage';\r\nimport LoginPage from '../LoginPage/LoginPage';\r\n\r\nimport { connect } from 'react-redux';\r\nclass App extends React.Component {\r\n  constructor ( props ) {\r\n    super ( props );\r\n    this.state = {\r\n      curPage : <MainPage />,\r\n      curSubPage : \"none\"\r\n    }   \r\n  }\r\n  static getDerivedStateFromProps(nextProps, state) {\r\n    let curPage = <MainPage />;\r\n    let curSubPage = \"none\";\r\n    switch ( nextProps.curPage ) {\r\n      case \"LoginPage\" : curPage = <LoginPage />; break;\r\n      case \"MainPage\"  : curPage = <MainPage />; break;\r\n      default : curPage = <MainPage />\r\n    } \r\n    switch ( nextProps.curSubPage ) {\r\n      default : curSubPage = \"none\"\r\n    }\r\n    return {\r\n      ...state,\r\n      curPage : curPage,\r\n      curSubPage : curSubPage\r\n    };\r\n  }\r\n   \r\n  render() {\r\n    return (\r\n      <div className = \"App\">\r\n        { this.state.curPage }\r\n        { this.state.curSubPage }\r\n      </div>\r\n    )\r\n  } \r\n}\r\nlet mapState = state =>{\r\n  return {\r\n    curId : state.curUserId,\r\n    curPage : state.curPage,\r\n    curSubPage : state.curSubPage\r\n  }   \r\n}\r\n\r\nexport default connect(mapState) (App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initState = {\r\n    curUserId : -1,\r\n    curPage : \"MainPage\",\r\n    curMenuSubPage : \"MP_Menu\",\r\n    curSubPage : \"none\"    \r\n}\r\n\r\nexport default initState;","import initState from './initState';\r\n\r\nlet initRed = (state = initState, action) => {\r\n    switch ( action.type ) {\r\n        case \"LOG_IN\" : \r\n            return {\r\n                ...state,\r\n                curUserId : action.data.newUserId,\r\n                curPage : \"MainPage\"          \r\n                }\r\n        default : \r\n            return state\r\n    }\r\n}\r\n\r\nexport default initRed;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// store\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport initRed from './redux/initRed';\r\n\r\nlet store = createStore( initRed );\r\n\r\nReactDOM.render(\r\n  <Provider store = { store } >\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode> \r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}